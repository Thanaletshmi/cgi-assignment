{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { HttpTestingController } from '@angular/common/http/testing';\nimport { async, inject, TestBed } from '@angular/core/testing';\nimport { LogAnalyzerService } from './log-analyzer.service';\ndescribe('LogAnalyzerService', () => {\n  let service;\n  let httpMock;\n  let url = 'http://localhost:8080/logs';\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule]\n    });\n    service = TestBed.inject(LogAnalyzerService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should call viewLogs and return the appropriate logs', () => {\n    // Arrange\n    const id = 'INFO';\n    const response = {\n      \"logType\": \"INFO\",\n      \"logDataList\": [{\n        \"logName\": \"PaymentService:\",\n        \"logMessage\": \"payment observers size 4\",\n        \"logCount\": 28\n      }, {\n        \"logName\": \"LifecycleService:\",\n        \"logMessage\": \"[127.0.0.1]:5701 [dev] [3.2.5] Address[127.0.0.1]:5701 is STARTING\",\n        \"logCount\": 26\n      }]\n    }; // Act\n\n    service.viewLogs(id).subscribe(data => {\n      // Assert\n      expect(data).toEqual(response);\n    });\n    const req = httpMock.expectOne({\n      method: 'GET'\n    });\n    req.flush(response);\n  });\n  it(`should issue a request`, // 1. declare as async test since the HttpClient works with Observables\n  async( // 2. inject HttpClient and HttpTestingController into the test\n  inject([HttpClient, HttpTestingController], (http, backend) => {\n    // 3. send a simple request\n    http.get('/info/INFO').subscribe(); // 4. HttpTestingController supersedes `MockBackend` from the \"old\" Http package\n    // here two, it's significantly less boilerplate code needed to verify an expected request\n\n    backend.expectOne({\n      url: '/info/INFO',\n      method: 'GET'\n    });\n  })));\n});","map":{"version":3,"sources":["/Users/karthik/My-Work/cgi-assignment/src/app/log-analyzer/services/log-analyzer.service.spec.ts"],"names":["HttpClient","HttpClientTestingModule","HttpTestingController","async","inject","TestBed","LogAnalyzerService","describe","service","httpMock","url","beforeEach","configureTestingModule","imports","it","expect","toBeTruthy","id","response","viewLogs","subscribe","data","toEqual","req","expectOne","method","flush","http","backend","get"],"mappings":"AAAA,SAASA,UAAT,QAA2B,sBAA3B;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,OAAxB,QAAuC,uBAAvC;AACA,SAASC,kBAAT,QAAmC,wBAAnC;AACAC,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACjC,MAAIC,OAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,GAAG,GAAG,4BAAV;AACAC,EAAAA,UAAU,CAAC,MAAM;AACbN,IAAAA,OAAO,CAACO,sBAAR,CAA+B;AAC3BC,MAAAA,OAAO,EAAE,CAACZ,uBAAD;AADkB,KAA/B;AAGAO,IAAAA,OAAO,GAAGH,OAAO,CAACD,MAAR,CAAeE,kBAAf,CAAV;AACH,GALS,CAAV;AAMAQ,EAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC1BC,IAAAA,MAAM,CAACP,OAAD,CAAN,CAAgBQ,UAAhB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,sDAAD,EAAyD,MAAM;AAC7D;AACA,UAAMG,EAAE,GAAG,MAAX;AACA,UAAMC,QAAQ,GAAG;AACb,iBAAW,MADE;AAEb,qBAAe,CACX;AACI,mBAAW,iBADf;AAEI,sBAAc,0BAFlB;AAGI,oBAAY;AAHhB,OADW,EAMX;AACI,mBAAW,mBADf;AAEI,sBAAc,oEAFlB;AAGI,oBAAY;AAHhB,OANW;AAFF,KAAjB,CAH6D,CAkB7D;;AACAV,IAAAA,OAAO,CAACW,QAAR,CAAiBF,EAAjB,EAAqBG,SAArB,CAAgCC,IAAD,IAAU;AACrC;AACAN,MAAAA,MAAM,CAACM,IAAD,CAAN,CAAaC,OAAb,CAAqBJ,QAArB;AACH,KAHD;AAIA,UAAMK,GAAG,GAAGd,QAAQ,CAACe,SAAT,CAAmB;AAC3BC,MAAAA,MAAM,EAAE;AADmB,KAAnB,CAAZ;AAGAF,IAAAA,GAAG,CAACG,KAAJ,CAAUR,QAAV;AACH,GA3BC,CAAF;AA4BAJ,EAAAA,EAAE,CAAE,wBAAF,EACF;AACAX,EAAAA,KAAK,EACL;AACAC,EAAAA,MAAM,CAAC,CAACJ,UAAD,EAAaE,qBAAb,CAAD,EAAsC,CAACyB,IAAD,EAAOC,OAAP,KAAmB;AAC3D;AACAD,IAAAA,IAAI,CAACE,GAAL,CAAS,YAAT,EAAuBT,SAAvB,GAF2D,CAG3D;AACA;;AACAQ,IAAAA,OAAO,CAACJ,SAAR,CAAkB;AACdd,MAAAA,GAAG,EAAE,YADS;AAEde,MAAAA,MAAM,EAAE;AAFM,KAAlB;AAIH,GATK,CAFD,CAFH,CAAF;AAcH,CAvDO,CAAR","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { HttpTestingController } from '@angular/common/http/testing';\nimport { async, inject, TestBed } from '@angular/core/testing';\nimport { LogAnalyzerService } from './log-analyzer.service';\ndescribe('LogAnalyzerService', () => {\n    let service;\n    let httpMock;\n    let url = 'http://localhost:8080/logs';\n    beforeEach(() => {\n        TestBed.configureTestingModule({\n            imports: [HttpClientTestingModule]\n        });\n        service = TestBed.inject(LogAnalyzerService);\n    });\n    it('should be created', () => {\n        expect(service).toBeTruthy();\n    });\n    it('should call viewLogs and return the appropriate logs', () => {\n        // Arrange\n        const id = 'INFO';\n        const response = {\n            \"logType\": \"INFO\",\n            \"logDataList\": [\n                {\n                    \"logName\": \"PaymentService:\",\n                    \"logMessage\": \"payment observers size 4\",\n                    \"logCount\": 28\n                },\n                {\n                    \"logName\": \"LifecycleService:\",\n                    \"logMessage\": \"[127.0.0.1]:5701 [dev] [3.2.5] Address[127.0.0.1]:5701 is STARTING\",\n                    \"logCount\": 26\n                }\n            ]\n        };\n        // Act\n        service.viewLogs(id).subscribe((data) => {\n            // Assert\n            expect(data).toEqual(response);\n        });\n        const req = httpMock.expectOne({\n            method: 'GET'\n        });\n        req.flush(response);\n    });\n    it(`should issue a request`, \n    // 1. declare as async test since the HttpClient works with Observables\n    async(\n    // 2. inject HttpClient and HttpTestingController into the test\n    inject([HttpClient, HttpTestingController], (http, backend) => {\n        // 3. send a simple request\n        http.get('/info/INFO').subscribe();\n        // 4. HttpTestingController supersedes `MockBackend` from the \"old\" Http package\n        // here two, it's significantly less boilerplate code needed to verify an expected request\n        backend.expectOne({\n            url: '/info/INFO',\n            method: 'GET'\n        });\n    })));\n});\n"]},"metadata":{},"sourceType":"module"}